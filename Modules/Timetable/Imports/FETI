<?php

namespace Modules\Timetable\Imports;

use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\ToCollection;
use Modules\Timetable\Entities\Subject;
use Modules\Timetable\Entities\SubjectYear;
use Modules\Timetable\Entities\SubjectType;
use Modules\Timetable\Entities\Specialization;
use Modules\Timetable\Entities\Program;
use Modules\Timetable\Entities\Faculty;
use Modules\Timetable\Entities\Schedule;
use Modules\Timetable\Entities\ScheduleRoom;
use Modules\Timetable\Entities\ScheduleYear;
use Modules\Timetable\Entities\ScheduleStudentSets;
use Modules\Timetable\Entities\Student;
use Modules\Timetable\Entities\Tags;
use Modules\Timetable\Entities\ScheduleActivityTags;
use Modules\Timetable\Entities\ScheduleTeachingTeam;
use Log;

use Carbon\carbon;

class FETTimetableImport implements ToCollection
{
    /**
    * @param array $row
    *
    * @return \Illuminate\Database\Eloquent\Model|null
    */
    private $programId;

    public function __construct(int $program_id)
    {
        $this->programId = $program_id;
    }
    public function collection (Collection $rows)
    {

        
        $activity_id = null;
        $schedules = collect();
        //select collection item based on program-based collection
        $activityNumber= null;
        foreach($rows as $row){
            $subject = null;
            if($row[4] != null){
                $subject = explode('-', $row[4]);
            }
            if($subject[0] == Program::where('id', $this->programId)->first()->code){
                
                if($row[0] != $activity_id){
                    $activity_id = $row[0];
                    $schedules->push($row);
                }
            }
        }
        
        dd($rows->count());
        $schedule_year = ScheduleYear::latest()->first();
        $start_day = $schedule_year->start_date;
        
        foreach($schedules as $schedule){
            
            while($schedules->count() >= Schedule::where('program_id', $this->programId)->where('year_id', $schedule_year->id)->count()){
                Schedule::where('program_id', $this->programId)->where('year_id', $schedule_year->id)
            }
        }
    }
}
